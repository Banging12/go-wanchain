diff --git a/core/types/transaction.go b/core/types/transaction.go
index 86f0add8b..b338b5bb7 100755
--- a/core/types/transaction.go
+++ b/core/types/transaction.go
@@ -409,9 +409,23 @@ func (tx *Transaction) Size() common.StorageSize {
 }
 
 func (tx *Transaction) IsValidType() bool {
-	if tx.Type() == LegacyTxType || tx.Type() == WanLegacyTxType || tx.Type() == DynamicFeeTxType || tx.Type() == WanPosTxType || tx.Type() == WanPrivTxType || tx.Type() == WanJupiterTxType {
-		return true
+	// TODO check how many types we need.
+	if !params.IsLondonActive() {
+		if !params.IsPosActive() {
+			if tx.Type() == LegacyTxType || tx.Type() == WanLegacyTxType || tx.Type() == WanTestnetTxType || tx.Type() == WanPosTxType || tx.Type() == WanPrivTxType || tx.Type() == WanJupiterTxType {
+				return true
+			}
+		} else {
+			if tx.Type() == LegacyTxType || tx.Type() == WanLegacyTxType || tx.Type() == WanPosTxType || tx.Type() == WanPrivTxType || tx.Type() == WanJupiterTxType {
+				return true
+			}
+		}
+	} else {
+		if tx.Type() == LegacyTxType || tx.Type() == WanLegacyTxType || tx.Type() == DynamicFeeTxType || tx.Type() == WanPosTxType || tx.Type() == WanPrivTxType || tx.Type() == WanJupiterTxType {
+			return true
+		}
 	}
+
 	return false
 }
 func (tx *Transaction) IsLegacyType() bool {
diff --git a/core/types/transaction_wan.go b/core/types/transaction_wan.go
index 98cf7e618..40fe6317a 100755
--- a/core/types/transaction_wan.go
+++ b/core/types/transaction_wan.go
@@ -6,13 +6,13 @@ import (
 )
 
 // deriveSigner makes a *best* guess about which signer to use.
-func deriveSigner(V *big.Int) Signer {
-	if V.Sign() != 0 && isProtectedV(V) {
-		return NewEIP155Signer(deriveChainId(V))
-	} else {
-		return HomesteadSigner{}
-	}
-}
+//func deriveSigner(V *big.Int) Signer {
+//	if V.Sign() != 0 && isProtectedV(V) {
+//		return NewEIP155Signer(deriveChainId(V))
+//	} else {
+//		return HomesteadSigner{}
+//	}
+//}
 
 ////////////////////////////////////for privacy tx ///////////////////////
 func NewOTATransaction(nonce uint64, to common.Address, amount, gasLimit, gasPrice *big.Int, data []byte) *Transaction {
@@ -31,7 +31,7 @@ const (
 )
 
 func IsNormalTransaction(txType uint64) bool {
-	return txType == WanLegacyTxType || txType == 0 || txType == 2   || txType == JUPITER_TX || txType == 0xff // some of old tx used , which is allowed.
+	return txType == WanLegacyTxType || txType == 0 || txType == 2 || txType == JUPITER_TX || txType == 0xff // some of old tx used , which is allowed.
 }
 func IsPosTransaction(txType uint64) bool {
 	return txType == WanPosTxType
diff --git a/eth/handler.go b/eth/handler.go
index 4be194824..9bcb56c22 100755
--- a/eth/handler.go
+++ b/eth/handler.go
@@ -259,7 +259,7 @@ func (h *handler) runEthPeer(peer *eth.Peer, handler eth.Handler) error {
 	)
 	forkID := forkid.NewID(h.chain.Config(), h.chain.Genesis().Hash(), h.chain.CurrentHeader().Number.Uint64())
 
-	if peer.Version() <= 63 { // TODOMERGE
+	if peer.Version() <= 63 {
 		if err := peer.Handshake63(h.networkID, td, hash, genesis.Hash(), forkID, h.forkFilter); err != nil {
 			peer.Log().Debug("Ethereum Handshake63 failed", "err", err)
 			return err
diff --git a/eth/protocols/eth/peer.go b/eth/protocols/eth/peer.go
index a343d0206..ad7f2fc2d 100755
--- a/eth/protocols/eth/peer.go
+++ b/eth/protocols/eth/peer.go
@@ -108,7 +108,7 @@ func NewPeer(version uint, p *p2p.Peer, rw p2p.MsgReadWriter, txpool TxPool) *Pe
 	// Start up all the broadcasters
 	go peer.broadcastBlocks()
 	go peer.broadcastTransactions()
-	if version >= ETH66 {
+	if version >= ETH65 {
 		go peer.announceTransactions()
 	}
 	return peer
diff --git a/eth/protocols/eth/protocol.go b/eth/protocols/eth/protocol.go
index 1fd54e639..ce94164f8 100755
--- a/eth/protocols/eth/protocol.go
+++ b/eth/protocols/eth/protocol.go
@@ -53,18 +53,20 @@ var protocolLengths = map[uint]uint64{ETH66: 17, ETH63: 17}
 const maxMessageSize = 10 * 1024 * 1024
 
 const (
-	StatusMsg                     = 0x00
-	NewBlockHashesMsg             = 0x01
-	TransactionsMsg               = 0x02
-	GetBlockHeadersMsg            = 0x03
-	BlockHeadersMsg               = 0x04
-	GetBlockBodiesMsg             = 0x05
-	BlockBodiesMsg                = 0x06
-	NewBlockMsg                   = 0x07
-	GetNodeDataMsg                = 0x0d
-	NodeDataMsg                   = 0x0e
-	GetReceiptsMsg                = 0x0f
-	ReceiptsMsg                   = 0x10
+	// Protocol messages in eth/63
+	StatusMsg          = 0x00
+	NewBlockHashesMsg  = 0x01
+	TransactionsMsg    = 0x02
+	GetBlockHeadersMsg = 0x03
+	BlockHeadersMsg    = 0x04
+	GetBlockBodiesMsg  = 0x05
+	BlockBodiesMsg     = 0x06
+	NewBlockMsg        = 0x07
+	GetNodeDataMsg     = 0x0d
+	NodeDataMsg        = 0x0e
+	GetReceiptsMsg     = 0x0f
+	ReceiptsMsg        = 0x10
+	// Protocol messages overloaded in eth/65,66
 	NewPooledTransactionHashesMsg = 0x08
 	GetPooledTransactionsMsg      = 0x09
 	PooledTransactionsMsg         = 0x0a
diff --git a/params/config_wan.go b/params/config_wan.go
index 944405c8b..0ced72c0b 100755
--- a/params/config_wan.go
+++ b/params/config_wan.go
@@ -75,7 +75,8 @@ func (c *PlutoConfig) String() string {
 
 var (
 	// MainnetChainConfig is the chain parameters to run a node on the main network.
-	MainnetChainConfig = &ChainConfig{
+	MainneLondonBlockNumber int64 = 21000000
+	MainnetChainConfig            = &ChainConfig{
 		ChainID:             big.NewInt(MAINNET_CHAIN_ID),
 		HomesteadBlock:      big.NewInt(0),
 		DAOForkBlock:        big.NewInt(0),
@@ -85,11 +86,12 @@ var (
 		EIP155Block:         big.NewInt(0),
 		EIP158Block:         big.NewInt(0),
 		ByzantiumBlock:      big.NewInt(0),
-		ConstantinopleBlock: big.NewInt(999_000_000_000),
-		PetersburgBlock:     big.NewInt(999_000_000_000),
-		IstanbulBlock:       big.NewInt(999_000_000_000),
-		MuirGlacierBlock:    big.NewInt(999_000_000_000),
-		BerlinBlock:         big.NewInt(999_000_000_000),
+		ConstantinopleBlock: big.NewInt(MainneLondonBlockNumber),
+		PetersburgBlock:     big.NewInt(MainneLondonBlockNumber),
+		IstanbulBlock:       big.NewInt(MainneLondonBlockNumber),
+		MuirGlacierBlock:    big.NewInt(MainneLondonBlockNumber),
+		BerlinBlock:         big.NewInt(MainneLondonBlockNumber),
+		LondonBlock:         big.NewInt(MainneLondonBlockNumber),
 		Ethash:              new(EthashConfig),
 
 		// add by Jacob
@@ -101,33 +103,8 @@ var (
 		},
 	}
 
-	WanchainChainConfig = &ChainConfig{
-		ChainID:             big.NewInt(MAINNET_CHAIN_ID),
-		HomesteadBlock:      big.NewInt(0),
-		DAOForkBlock:        big.NewInt(0),
-		DAOForkSupport:      false,
-		EIP150Block:         big.NewInt(0),
-		EIP150Hash:          common.HexToHash("0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0"),
-		EIP155Block:         big.NewInt(0),
-		EIP158Block:         big.NewInt(0),
-		ByzantiumBlock:      big.NewInt(0),
-		ConstantinopleBlock: big.NewInt(999_000_000_000),
-		PetersburgBlock:     big.NewInt(999_000_000_000),
-		IstanbulBlock:       big.NewInt(999_000_000_000),
-		MuirGlacierBlock:    big.NewInt(999_000_000_000),
-		BerlinBlock:         big.NewInt(999_000_000_000),
-		Ethash:              new(EthashConfig),
-
-		// add by Jacob
-		PosFirstBlock: big.NewInt(MainnetPow2PosUpgradeBlockNumber), // set as n * epoch_length
-		IsPosActive:   false,
-		Pluto: &PlutoConfig{
-			Period: 10,
-			Epoch:  100,
-		},
-	}
-
-	TestnetChainConfig = &ChainConfig{
+	TestnetLondonBlockNumber int64 = 22000000
+	TestnetChainConfig             = &ChainConfig{
 		ChainID:             big.NewInt(TESTNET_CHAIN_ID),
 		HomesteadBlock:      big.NewInt(0),
 		DAOForkBlock:        big.NewInt(0),
@@ -137,11 +114,12 @@ var (
 		EIP155Block:         big.NewInt(0),
 		EIP158Block:         big.NewInt(0),
 		ByzantiumBlock:      big.NewInt(0),
-		ConstantinopleBlock: big.NewInt(999_000_000_000),
-		PetersburgBlock:     big.NewInt(999_000_000_000),
-		IstanbulBlock:       big.NewInt(999_000_000_000),
-		MuirGlacierBlock:    big.NewInt(999_000_000_000),
-		BerlinBlock:         big.NewInt(999_000_000_000),
+		ConstantinopleBlock: big.NewInt(TestnetLondonBlockNumber),
+		PetersburgBlock:     big.NewInt(TestnetLondonBlockNumber),
+		IstanbulBlock:       big.NewInt(TestnetLondonBlockNumber),
+		MuirGlacierBlock:    big.NewInt(TestnetLondonBlockNumber),
+		BerlinBlock:         big.NewInt(TestnetLondonBlockNumber),
+		LondonBlock:         big.NewInt(TestnetLondonBlockNumber),
 		Ethash:              new(EthashConfig),
 
 		// add by Jacob
@@ -153,7 +131,8 @@ var (
 		},
 	}
 
-	InternalChainConfig = &ChainConfig{
+	InternalLondonBlockNumber int64 = 22000000
+	InternalChainConfig             = &ChainConfig{
 		ChainID:             big.NewInt(INTERNAL_CHAIN_ID),
 		HomesteadBlock:      big.NewInt(0),
 		DAOForkBlock:        big.NewInt(0),
@@ -163,11 +142,12 @@ var (
 		EIP155Block:         big.NewInt(0),
 		EIP158Block:         big.NewInt(0),
 		ByzantiumBlock:      big.NewInt(0),
-		ConstantinopleBlock: big.NewInt(999_000_000_000),
-		PetersburgBlock:     big.NewInt(999_000_000_000),
-		IstanbulBlock:       big.NewInt(999_000_000_000),
-		MuirGlacierBlock:    big.NewInt(999_000_000_000),
-		BerlinBlock:         big.NewInt(999_000_000_000),
+		ConstantinopleBlock: big.NewInt(InternalLondonBlockNumber),
+		PetersburgBlock:     big.NewInt(InternalLondonBlockNumber),
+		IstanbulBlock:       big.NewInt(InternalLondonBlockNumber),
+		MuirGlacierBlock:    big.NewInt(InternalLondonBlockNumber),
+		BerlinBlock:         big.NewInt(InternalLondonBlockNumber),
+		LondonBlock:         big.NewInt(InternalLondonBlockNumber),
 		Ethash:              new(EthashConfig),
 
 		// add by Jacob
@@ -179,7 +159,8 @@ var (
 		},
 	}
 
-	PlutoChainConfig = &ChainConfig{
+	PlutoLondonBlockNumber int64 = 10000
+	PlutoChainConfig             = &ChainConfig{
 		ChainID:             big.NewInt(PLUTO_CHAIN_ID),
 		HomesteadBlock:      big.NewInt(0),
 		DAOForkBlock:        big.NewInt(0),
@@ -189,12 +170,12 @@ var (
 		EIP155Block:         big.NewInt(0),
 		EIP158Block:         big.NewInt(0),
 		ByzantiumBlock:      big.NewInt(0),
-		ConstantinopleBlock: big.NewInt(0),
-		PetersburgBlock:     big.NewInt(0),
-		IstanbulBlock:       big.NewInt(0),
-		MuirGlacierBlock:    big.NewInt(0),
-		BerlinBlock:         big.NewInt(0),
-		LondonBlock:         big.NewInt(0),
+		ConstantinopleBlock: big.NewInt(PlutoLondonBlockNumber),
+		PetersburgBlock:     big.NewInt(PlutoLondonBlockNumber),
+		IstanbulBlock:       big.NewInt(PlutoLondonBlockNumber),
+		MuirGlacierBlock:    big.NewInt(PlutoLondonBlockNumber),
+		BerlinBlock:         big.NewInt(PlutoLondonBlockNumber),
+		LondonBlock:         big.NewInt(PlutoLondonBlockNumber),
 		Ethash:              new(EthashConfig),
 
 		// add by Jacob
@@ -205,69 +186,6 @@ var (
 			Epoch:  100,
 		},
 	}
-	/*
-		// RinkebyChainConfig contains the chain parameters to run a node on the Rinkeby test network.
-		InternalChainConfig = &ChainConfig{
-			ChainID: big.NewInt(4),
-			//HomesteadBlock: big.NewInt(1),
-			//DAOForkBlock:   nil,
-			//DAOForkSupport: true,
-			//EIP150Block:    big.NewInt(2),
-			//EIP150Hash:     common.HexToHash("0x9b095b36c15eaf13044373aef8ee0bd3a382a5abb92e402afa44b8249c3a90e9"),
-			//EIP155Block:    big.NewInt(3),
-			//EIP158Block:    big.NewInt(3),
-			ByzantiumBlock: big.NewInt(0),
-
-			Ethash: new(EthashConfig),
-		}
-		// PlutoChainConfig contains the chain parameters to run a node on the Pluto test network.
-		PlutoChainConfig = &ChainConfig{
-			ChainID: big.NewInt(6),
-			//HomesteadBlock: big.NewInt(0),
-			//DAOForkBlock:   nil,
-			//DAOForkSupport: true,
-			//EIP150Block:    big.NewInt(0),
-			//EIP150Hash:     common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000"),
-			//EIP155Block:    big.NewInt(3),
-			//EIP158Block:    big.NewInt(3),
-			ByzantiumBlock: big.NewInt(0),
-
-			Pluto: &PlutoConfig{
-				Period: 6,
-				Epoch:  6000,
-			},
-		}
-	*/
-
-	// AllProtocolChanges contains every protocol change (EIPs)
-	// introduced and accepted by the Ethereum core developers.
-	//
-	// This configuration is intentionally not using keyed fields.
-	// This configuration must *always* have all forks enabled, which
-	// means that all fields must be set at all times. This forces
-	// anyone adding flags to the config to also have to set these
-	// fields.
-	//AllProtocolChanges = &ChainConfig{big.NewInt(1337), big.NewInt(0), big.NewInt(100), false, new(EthashConfig), nil, nil}
-	//
-	//TestChainConfig = &ChainConfig{
-	//	ChainId:        big.NewInt(MAINNET_CHAIN_ID),
-	//	ByzantiumBlock: big.NewInt(0),
-	//	Ethash:         new(EthashConfig),
-	//	PosFirstBlock:  big.NewInt(TestnetPow2PosUpgradeBlockNumber), // set as n * epoch_length
-	//	IsPosActive:    false,
-	//}
-	//
-	//TestRules = TestChainConfig.Rules(new(big.Int))
-
-	// add by Jacob
-	//	PosFirstBlock: big.NewInt(1), // set as n * epoch_length
-	//	IsPosActive:   true,
-	//	Pluto: &PlutoConfig{
-	//		Period: 10,
-	//		Epoch:  100,
-	//	},
-	//}
-
 	noStaking = false
 )
 
